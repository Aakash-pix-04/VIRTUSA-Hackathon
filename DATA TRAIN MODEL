import json
import nltk
import pickle
import numpy as np
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import Sequential, load_model

# Load original and traffic management intents
intents_path = 'intents.json'
traffic_intents_path = 'traffic_intents.json'

intents = json.loads(open(intents_path).read())
traffic_intents = json.loads(open(traffic_intents_path).read())
intents['intents'].extend(traffic_intents['intents'])

# Preprocess data
words = []
classes = []
documents = []
ignore_letters = ['?', '!', ',', '.']

lemmatizer = WordNetLemmatizer()

for intent in intents['intents']:
    for pattern in intent['patterns']:
        word_list = nltk.word_tokenize(pattern)
        words.extend([lemmatizer.lemmatize(word.lower()) for word in word_list if word not in ignore_letters])
        documents.append((word_list, intent['tag']))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

words = sorted(set(words))
classes = sorted(set(classes))

# Save updated words and classes
pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

# Training data preparation
training = []
output_empty = [0] * len(classes)

for document in documents:
    bag = [1 if lemmatizer.lemmatize(word.lower()) in document[0] else 0 for word in words]
    output_row = [0] * len(classes)
    output_row[classes.index(document[1])] = 1
    training.append([bag, output_row])

training = np.array(training)
train_x = list(training[:, 0])
train_y = list(training[:, 1])

# Build and train the model
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save('chatbotmodel.h5')

# User interaction
user_messages = ["hi", "traffic status at xyz road", "transportation available for abd to xyz road", "thank you!"]

for user_message in user_messages:
    prompt = f"User: {user_message}"
    response = model.predict(np.array([bag_of_words(user_message)]))[0]
    results = [[i, r] for i, r in enumerate(response) if r > 0.25]
    results.sort(key=lambda x: x[1], reverse=True)
    intent_tag = classes[results[0][0]]
    bot_response = [random.choice(intent['responses']) for intent in intents['intents'] if intent['tag'] == intent_tag][0]
    print(f"User: {user_message}")
    print(f"Bot: {bot_response}")
